generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  username   String         @unique
  password   String
  name       String
  token      String?
  avatar     String?
  contact    Contact?       @relation(fields: [contactId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  contactId  String?        @unique @db.ObjectId
  favorite   Favorite[]     @relation()
  comment    Comment[]      @relation()
  replies    ReplyComment[] @relation()
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

model Contact {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  first_name String
  last_name  String
  email      String?  @unique
  phone      String?
  user       User?    @relation()
  userId     String?  @db.ObjectId
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("contacts")
}

model Favorite {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  animeId    String
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("favorites")
}

model Comment {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  animeId    String
  content    String
  user       User           @relation(fields: [userId], references: [id])
  userId     String         @db.ObjectId
  replies    ReplyComment[] @relation("CommentReplies")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("comments")
}

model ReplyComment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  comment    Comment  @relation("CommentReplies", fields: [commentId], references: [id], onDelete: Cascade)
  commentId  String   @db.ObjectId
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("reply_comments")
}
